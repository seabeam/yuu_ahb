/////////////////////////////////////////////////////////////////////////////////////
// Copyright 2020 seabeam@yahoo.com - Licensed under the Apache License, Version 2.0
// For more information, see LICENCE in the main folder
/////////////////////////////////////////////////////////////////////////////////////
`ifndef GUARD_YUU_AHB_SLAVE_INTERFACE_SVI
`define GUARD_YUU_AHB_SLAVE_INTERFACE_SVI

// Interface: yuu_ahb_master_interface
// AHB master bus interface 
interface yuu_ahb_slave_interface();
  logic                               hclk;
  logic                               hreset_n;
  logic [`YUU_AHB_MAX_ADDR_WIDTH-1:0] haddr;
  logic [1:0]                         htrans;
  logic [2:0]                         hburst;
  logic                               hwrite;
  logic [2:0]                         hsize;
  logic                               hsel;
  logic [`YUU_AHB_MAX_DATA_WIDTH-1:0] hwdata;
  logic [`YUU_AHB_MAX_DATA_WIDTH-1:0] hrdata;
  logic                               hready_i;
  logic                               hready_o;
  logic [1:0]                         hresp;

  logic [3:0]                         hprot;
  logic [6:3]                         hprot_emt;
  logic [3:0]                         hmaster;
  logic                               hmastlock;
  logic                               hnonsec;
  logic                               hexokay;

  logic                               excl_write_enable;
  logic [31:0]                        transfer_num;

  clocking cb @(posedge hclk);
  endclocking

  clocking drv_cb @(posedge hclk);
    default input #`YUU_AHB_SLAVE_SETUP_TIME output #`YUU_AHB_SLAVE_HOLD_TIME;

    input   hsel;
    input   haddr;
    input   htrans;
    input   hburst;
    input   hwrite;
    input   hsize;
    input   hwdata;
    input   hprot;
    input   hprot_emt;
    input   hmaster;
    input   hmastlock;
    input   hnonsec;
    input   hready_i;
    input   excl_write_enable;

    output  hrdata;
    output  hresp;
    output  hready_o;
    output  hexokay;
  endclocking

  clocking mon_cb @(posedge hclk);
    default input #`YUU_AHB_SLAVE_SETUP_TIME output #`YUU_AHB_SLAVE_HOLD_TIME;

    input   hsel;
    input   haddr;
    input   htrans;
    input   hburst;
    input   hwrite;
    input   hsize;
    input   hwdata;
    input   hprot;
    input   hprot_emt;
    input   hmaster;
    input   hmastlock;
    input   hnonsec;
    input   hready_i;
    input   excl_write_enable;

    input   hrdata;
    input   hresp;
    input   hready_o;
    input   hexokay;
  endclocking

  modport drv_mp (
    input   hreset_n,
    input   hsel,
    input   haddr,
    input   htrans,
    input   hburst,
    input   hwrite,
    input   hsize,
    input   hwdata,
    input   hprot,
    input   hprot_emt,
    input   hmaster,
    input   hmastlock,
    input   hnonsec,
    input   hready_i,
    input   excl_write_enable,

    output  hrdata,
    output  hresp,
    output  hready_o,
    output  hexokay
  );

  modport mon_mp (
    input   hreset_n,
    input   hsel,
    input   haddr,
    input   htrans,
    input   hburst,
    input   hwrite,
    input   hsize,
    input   hwdata,
    input   hprot,
    input   hprot_emt,
    input   hmaster,
    input   hmastlock,
    input   hnonsec,
    input   hready_i,
    input   excl_write_enable,

    input   hrdata,
    input   hresp,
    input   hready_o,
    input   hexokay
  );

  task wait_cycle();
    @(posedge hclk);
  endtask
endinterface

`endif
